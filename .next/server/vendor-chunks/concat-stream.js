"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/concat-stream";
exports.ids = ["vendor-chunks/concat-stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/concat-stream/index.js":
/*!*********************************************!*\
  !*** ./node_modules/concat-stream/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Writable = (__webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\").Writable);\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\");\nvar bufferFrom = __webpack_require__(/*! buffer-from */ \"(rsc)/./node_modules/buffer-from/index.js\");\nif (typeof Uint8Array === \"undefined\") {\n    var U8 = (__webpack_require__(/*! typedarray */ \"(rsc)/./node_modules/typedarray/index.js\").Uint8Array);\n} else {\n    var U8 = Uint8Array;\n}\nfunction ConcatStream(opts, cb) {\n    if (!(this instanceof ConcatStream)) return new ConcatStream(opts, cb);\n    if (typeof opts === \"function\") {\n        cb = opts;\n        opts = {};\n    }\n    if (!opts) opts = {};\n    var encoding = opts.encoding;\n    var shouldInferEncoding = false;\n    if (!encoding) {\n        shouldInferEncoding = true;\n    } else {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"u8\" || encoding === \"uint8\") {\n            encoding = \"uint8array\";\n        }\n    }\n    Writable.call(this, {\n        objectMode: true\n    });\n    this.encoding = encoding;\n    this.shouldInferEncoding = shouldInferEncoding;\n    if (cb) this.on(\"finish\", function() {\n        cb(this.getBody());\n    });\n    this.body = [];\n}\nmodule.exports = ConcatStream;\ninherits(ConcatStream, Writable);\nConcatStream.prototype._write = function(chunk, enc, next) {\n    this.body.push(chunk);\n    next();\n};\nConcatStream.prototype.inferEncoding = function(buff) {\n    var firstBuffer = buff === undefined ? this.body[0] : buff;\n    if (Buffer.isBuffer(firstBuffer)) return \"buffer\";\n    if (typeof Uint8Array !== \"undefined\" && firstBuffer instanceof Uint8Array) return \"uint8array\";\n    if (Array.isArray(firstBuffer)) return \"array\";\n    if (typeof firstBuffer === \"string\") return \"string\";\n    if (Object.prototype.toString.call(firstBuffer) === \"[object Object]\") return \"object\";\n    return \"buffer\";\n};\nConcatStream.prototype.getBody = function() {\n    if (!this.encoding && this.body.length === 0) return [];\n    if (this.shouldInferEncoding) this.encoding = this.inferEncoding();\n    if (this.encoding === \"array\") return arrayConcat(this.body);\n    if (this.encoding === \"string\") return stringConcat(this.body);\n    if (this.encoding === \"buffer\") return bufferConcat(this.body);\n    if (this.encoding === \"uint8array\") return u8Concat(this.body);\n    return this.body;\n};\nvar isArray = Array.isArray || function(arr) {\n    return Object.prototype.toString.call(arr) == \"[object Array]\";\n};\nfunction isArrayish(arr) {\n    return /Array\\]$/.test(Object.prototype.toString.call(arr));\n}\nfunction isBufferish(p) {\n    return typeof p === \"string\" || isArrayish(p) || p && typeof p.subarray === \"function\";\n}\nfunction stringConcat(parts) {\n    var strings = [];\n    var needsToString = false;\n    for(var i = 0; i < parts.length; i++){\n        var p = parts[i];\n        if (typeof p === \"string\") {\n            strings.push(p);\n        } else if (Buffer.isBuffer(p)) {\n            strings.push(p);\n        } else if (isBufferish(p)) {\n            strings.push(bufferFrom(p));\n        } else {\n            strings.push(bufferFrom(String(p)));\n        }\n    }\n    if (Buffer.isBuffer(parts[0])) {\n        strings = Buffer.concat(strings);\n        strings = strings.toString(\"utf8\");\n    } else {\n        strings = strings.join(\"\");\n    }\n    return strings;\n}\nfunction bufferConcat(parts) {\n    var bufs = [];\n    for(var i = 0; i < parts.length; i++){\n        var p = parts[i];\n        if (Buffer.isBuffer(p)) {\n            bufs.push(p);\n        } else if (isBufferish(p)) {\n            bufs.push(bufferFrom(p));\n        } else {\n            bufs.push(bufferFrom(String(p)));\n        }\n    }\n    return Buffer.concat(bufs);\n}\nfunction arrayConcat(parts) {\n    var res = [];\n    for(var i = 0; i < parts.length; i++){\n        res.push.apply(res, parts[i]);\n    }\n    return res;\n}\nfunction u8Concat(parts) {\n    var len = 0;\n    for(var i = 0; i < parts.length; i++){\n        if (typeof parts[i] === \"string\") {\n            parts[i] = bufferFrom(parts[i]);\n        }\n        len += parts[i].length;\n    }\n    var u8 = new U8(len);\n    for(var i = 0, offset = 0; i < parts.length; i++){\n        var part = parts[i];\n        for(var j = 0; j < part.length; j++){\n            u8[offset++] = part[j];\n        }\n    }\n    return u8;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/concat-stream/index.js\n");

/***/ })

};
;