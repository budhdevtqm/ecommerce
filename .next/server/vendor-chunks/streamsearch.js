"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/streamsearch";
exports.ids = ["vendor-chunks/streamsearch"];
exports.modules = {

/***/ "(rsc)/./node_modules/streamsearch/lib/sbmh.js":
/*!***********************************************!*\
  !*** ./node_modules/streamsearch/lib/sbmh.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n/*\n  Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n  by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n*/ function memcmp(buf1, pos1, buf2, pos2, num) {\n    for(let i = 0; i < num; ++i){\n        if (buf1[pos1 + i] !== buf2[pos2 + i]) return false;\n    }\n    return true;\n}\nclass SBMH {\n    constructor(needle, cb){\n        if (typeof cb !== \"function\") throw new Error(\"Missing match callback\");\n        if (typeof needle === \"string\") needle = Buffer.from(needle);\n        else if (!Buffer.isBuffer(needle)) throw new Error(`Expected Buffer for needle, got ${typeof needle}`);\n        const needleLen = needle.length;\n        this.maxMatches = Infinity;\n        this.matches = 0;\n        this._cb = cb;\n        this._lookbehindSize = 0;\n        this._needle = needle;\n        this._bufPos = 0;\n        this._lookbehind = Buffer.allocUnsafe(needleLen);\n        // Initialize occurrence table.\n        this._occ = [\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen,\n            needleLen\n        ];\n        // Populate occurrence table with analysis of the needle, ignoring the last\n        // letter.\n        if (needleLen > 1) {\n            for(let i = 0; i < needleLen - 1; ++i)this._occ[needle[i]] = needleLen - 1 - i;\n        }\n    }\n    reset() {\n        this.matches = 0;\n        this._lookbehindSize = 0;\n        this._bufPos = 0;\n    }\n    push(chunk, pos) {\n        let result;\n        if (!Buffer.isBuffer(chunk)) chunk = Buffer.from(chunk, \"latin1\");\n        const chunkLen = chunk.length;\n        this._bufPos = pos || 0;\n        while(result !== chunkLen && this.matches < this.maxMatches)result = feed(this, chunk);\n        return result;\n    }\n    destroy() {\n        const lbSize = this._lookbehindSize;\n        if (lbSize) this._cb(false, this._lookbehind, 0, lbSize, false);\n        this.reset();\n    }\n}\nfunction feed(self, data) {\n    const len = data.length;\n    const needle = self._needle;\n    const needleLen = needle.length;\n    // Positive: points to a position in `data`\n    //           pos == 3 points to data[3]\n    // Negative: points to a position in the lookbehind buffer\n    //           pos == -2 points to lookbehind[lookbehindSize - 2]\n    let pos = -self._lookbehindSize;\n    const lastNeedleCharPos = needleLen - 1;\n    const lastNeedleChar = needle[lastNeedleCharPos];\n    const end = len - needleLen;\n    const occ = self._occ;\n    const lookbehind = self._lookbehind;\n    if (pos < 0) {\n        // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n        // search with character lookup code that considers both the\n        // lookbehind buffer and the current round's haystack data.\n        //\n        // Loop until\n        //   there is a match.\n        // or until\n        //   we've moved past the position that requires the\n        //   lookbehind buffer. In this case we switch to the\n        //   optimized loop.\n        // or until\n        //   the character to look at lies outside the haystack.\n        while(pos < 0 && pos <= end){\n            const nextPos = pos + lastNeedleCharPos;\n            const ch = nextPos < 0 ? lookbehind[self._lookbehindSize + nextPos] : data[nextPos];\n            if (ch === lastNeedleChar && matchNeedle(self, data, pos, lastNeedleCharPos)) {\n                self._lookbehindSize = 0;\n                ++self.matches;\n                if (pos > -self._lookbehindSize) self._cb(true, lookbehind, 0, self._lookbehindSize + pos, false);\n                else self._cb(true, undefined, 0, 0, true);\n                return self._bufPos = pos + needleLen;\n            }\n            pos += occ[ch];\n        }\n        // No match.\n        // There's too few data for Boyer-Moore-Horspool to run,\n        // so let's use a different algorithm to skip as much as\n        // we can.\n        // Forward pos until\n        //   the trailing part of lookbehind + data\n        //   looks like the beginning of the needle\n        // or until\n        //   pos == 0\n        while(pos < 0 && !matchNeedle(self, data, pos, len - pos))++pos;\n        if (pos < 0) {\n            // Cut off part of the lookbehind buffer that has\n            // been processed and append the entire haystack\n            // into it.\n            const bytesToCutOff = self._lookbehindSize + pos;\n            if (bytesToCutOff > 0) {\n                // The cut off data is guaranteed not to contain the needle.\n                self._cb(false, lookbehind, 0, bytesToCutOff, false);\n            }\n            self._lookbehindSize -= bytesToCutOff;\n            lookbehind.copy(lookbehind, 0, bytesToCutOff, self._lookbehindSize);\n            lookbehind.set(data, self._lookbehindSize);\n            self._lookbehindSize += len;\n            self._bufPos = len;\n            return len;\n        }\n        // Discard lookbehind buffer.\n        self._cb(false, lookbehind, 0, self._lookbehindSize, false);\n        self._lookbehindSize = 0;\n    }\n    pos += self._bufPos;\n    const firstNeedleChar = needle[0];\n    // Lookbehind buffer is now empty. Perform Boyer-Moore-Horspool\n    // search with optimized character lookup code that only considers\n    // the current round's haystack data.\n    while(pos <= end){\n        const ch = data[pos + lastNeedleCharPos];\n        if (ch === lastNeedleChar && data[pos] === firstNeedleChar && memcmp(needle, 0, data, pos, lastNeedleCharPos)) {\n            ++self.matches;\n            if (pos > 0) self._cb(true, data, self._bufPos, pos, true);\n            else self._cb(true, undefined, 0, 0, true);\n            return self._bufPos = pos + needleLen;\n        }\n        pos += occ[ch];\n    }\n    // There was no match. If there's trailing haystack data that we cannot\n    // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n    // data is less than the needle size) then match using a modified\n    // algorithm that starts matching from the beginning instead of the end.\n    // Whatever trailing data is left after running this algorithm is added to\n    // the lookbehind buffer.\n    while(pos < len){\n        if (data[pos] !== firstNeedleChar || !memcmp(data, pos, needle, 0, len - pos)) {\n            ++pos;\n            continue;\n        }\n        data.copy(lookbehind, 0, pos, len);\n        self._lookbehindSize = len - pos;\n        break;\n    }\n    // Everything until `pos` is guaranteed not to contain needle data.\n    if (pos > 0) self._cb(false, data, self._bufPos, pos < len ? pos : len, true);\n    self._bufPos = len;\n    return len;\n}\nfunction matchNeedle(self, data, pos, len) {\n    const lb = self._lookbehind;\n    const lbSize = self._lookbehindSize;\n    const needle = self._needle;\n    for(let i = 0; i < len; ++i, ++pos){\n        const ch = pos < 0 ? lb[lbSize + pos] : data[pos];\n        if (ch !== needle[i]) return false;\n    }\n    return true;\n}\nmodule.exports = SBMH;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/streamsearch/lib/sbmh.js\n");

/***/ })

};
;