"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/type-is";
exports.ids = ["vendor-chunks/type-is"];
exports.modules = {

/***/ "(rsc)/./node_modules/type-is/index.js":
/*!***************************************!*\
  !*** ./node_modules/type-is/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * type-is\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var typer = __webpack_require__(/*! media-typer */ \"(rsc)/./node_modules/media-typer/index.js\");\nvar mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = typeofrequest;\nmodule.exports.is = typeis;\nmodule.exports.hasBody = hasbody;\nmodule.exports.normalize = normalize;\nmodule.exports.match = mimeMatch;\n/**\n * Compare a `value` content-type with `types`.\n * Each `type` can be an extension like `html`,\n * a special shortcut like `multipart` or `urlencoded`,\n * or a mime type.\n *\n * If no types match, `false` is returned.\n * Otherwise, the first `type` that matches is returned.\n *\n * @param {String} value\n * @param {Array} types\n * @public\n */ function typeis(value, types_) {\n    var i;\n    var types = types_;\n    // remove parameters and normalize\n    var val = tryNormalizeType(value);\n    // no type or invalid\n    if (!val) {\n        return false;\n    }\n    // support flattened arguments\n    if (types && !Array.isArray(types)) {\n        types = new Array(arguments.length - 1);\n        for(i = 0; i < types.length; i++){\n            types[i] = arguments[i + 1];\n        }\n    }\n    // no types, return the content type\n    if (!types || !types.length) {\n        return val;\n    }\n    var type;\n    for(i = 0; i < types.length; i++){\n        if (mimeMatch(normalize(type = types[i]), val)) {\n            return type[0] === \"+\" || type.indexOf(\"*\") !== -1 ? val : type;\n        }\n    }\n    // no matches\n    return false;\n}\n/**\n * Check if a request has a request body.\n * A request with a body __must__ either have `transfer-encoding`\n * or `content-length` headers set.\n * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n *\n * @param {Object} request\n * @return {Boolean}\n * @public\n */ function hasbody(req) {\n    return req.headers[\"transfer-encoding\"] !== undefined || !isNaN(req.headers[\"content-length\"]);\n}\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains any of the give mime `type`s.\n * If there is no request body, `null` is returned.\n * If there is no content type, `false` is returned.\n * Otherwise, it returns the first `type` that matches.\n *\n * Examples:\n *\n *     // With Content-Type: text/html; charset=utf-8\n *     this.is('html'); // => 'html'\n *     this.is('text/html'); // => 'text/html'\n *     this.is('text/*', 'application/json'); // => 'text/html'\n *\n *     // When Content-Type is application/json\n *     this.is('json', 'urlencoded'); // => 'json'\n *     this.is('application/json'); // => 'application/json'\n *     this.is('html', 'application/*'); // => 'application/json'\n *\n *     this.is('html'); // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */ function typeofrequest(req, types_) {\n    var types = types_;\n    // no body\n    if (!hasbody(req)) {\n        return null;\n    }\n    // support flattened arguments\n    if (arguments.length > 2) {\n        types = new Array(arguments.length - 1);\n        for(var i = 0; i < types.length; i++){\n            types[i] = arguments[i + 1];\n        }\n    }\n    // request content type\n    var value = req.headers[\"content-type\"];\n    return typeis(value, types);\n}\n/**\n * Normalize a mime type.\n * If it's a shorthand, expand it to a valid mime type.\n *\n * In general, you probably want:\n *\n *   var type = is(req, ['urlencoded', 'json', 'multipart']);\n *\n * Then use the appropriate body parsers.\n * These three are the most common request body types\n * and are thus ensured to work.\n *\n * @param {String} type\n * @private\n */ function normalize(type) {\n    if (typeof type !== \"string\") {\n        // invalid type\n        return false;\n    }\n    switch(type){\n        case \"urlencoded\":\n            return \"application/x-www-form-urlencoded\";\n        case \"multipart\":\n            return \"multipart/*\";\n    }\n    if (type[0] === \"+\") {\n        // \"+json\" -> \"*/*+json\" expando\n        return \"*/*\" + type;\n    }\n    return type.indexOf(\"/\") === -1 ? mime.lookup(type) : type;\n}\n/**\n * Check if `expected` mime type\n * matches `actual` mime type with\n * wildcard and +suffix support.\n *\n * @param {String} expected\n * @param {String} actual\n * @return {Boolean}\n * @private\n */ function mimeMatch(expected, actual) {\n    // invalid type\n    if (expected === false) {\n        return false;\n    }\n    // split types\n    var actualParts = actual.split(\"/\");\n    var expectedParts = expected.split(\"/\");\n    // invalid format\n    if (actualParts.length !== 2 || expectedParts.length !== 2) {\n        return false;\n    }\n    // validate type\n    if (expectedParts[0] !== \"*\" && expectedParts[0] !== actualParts[0]) {\n        return false;\n    }\n    // validate suffix wildcard\n    if (expectedParts[1].substr(0, 2) === \"*+\") {\n        return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);\n    }\n    // validate subtype\n    if (expectedParts[1] !== \"*\" && expectedParts[1] !== actualParts[1]) {\n        return false;\n    }\n    return true;\n}\n/**\n * Normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @private\n */ function normalizeType(value) {\n    // parse the type\n    var type = typer.parse(value);\n    // remove the parameters\n    type.parameters = undefined;\n    // reformat it\n    return typer.format(type);\n}\n/**\n * Try to normalize a type and remove parameters.\n *\n * @param {string} value\n * @return {string}\n * @private\n */ function tryNormalizeType(value) {\n    if (!value) {\n        return null;\n    }\n    try {\n        return normalizeType(value);\n    } catch (err) {\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/type-is/index.js\n");

/***/ })

};
;