/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/media-typer";
exports.ids = ["vendor-chunks/media-typer"];
exports.modules = {

/***/ "(rsc)/./node_modules/media-typer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/media-typer/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * media-typer\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */ /**\n * RegExp to match *( \";\" parameter ) in RFC 2616 sec 3.7\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * SHT           = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n */ var paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u0020-\\u007e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g;\nvar textRegExp = /^[\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/;\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n */ var qescRegExp = /\\\\([\\u0000-\\u007f])/g;\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n */ var quoteRegExp = /([\\\\\"])/g;\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */ var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;\nvar typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;\nvar typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\n/**\n * Module exports.\n */ exports.format = format;\nexports.parse = parse;\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @api public\n */ function format(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        throw new TypeError(\"argument obj is required\");\n    }\n    var parameters = obj.parameters;\n    var subtype = obj.subtype;\n    var suffix = obj.suffix;\n    var type = obj.type;\n    if (!type || !typeNameRegExp.test(type)) {\n        throw new TypeError(\"invalid type\");\n    }\n    if (!subtype || !subtypeNameRegExp.test(subtype)) {\n        throw new TypeError(\"invalid subtype\");\n    }\n    // format as type/subtype\n    var string = type + \"/\" + subtype;\n    // append +suffix\n    if (suffix) {\n        if (!typeNameRegExp.test(suffix)) {\n            throw new TypeError(\"invalid suffix\");\n        }\n        string += \"+\" + suffix;\n    }\n    // append parameters\n    if (parameters && typeof parameters === \"object\") {\n        var param;\n        var params = Object.keys(parameters).sort();\n        for(var i = 0; i < params.length; i++){\n            param = params[i];\n            if (!tokenRegExp.test(param)) {\n                throw new TypeError(\"invalid parameter name\");\n            }\n            string += \"; \" + param + \"=\" + qstring(parameters[param]);\n        }\n    }\n    return string;\n}\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @api public\n */ function parse(string) {\n    if (!string) {\n        throw new TypeError(\"argument string is required\");\n    }\n    // support req/res-like objects as argument\n    if (typeof string === \"object\") {\n        string = getcontenttype(string);\n    }\n    if (typeof string !== \"string\") {\n        throw new TypeError(\"argument string is required to be a string\");\n    }\n    var index = string.indexOf(\";\");\n    var type = index !== -1 ? string.substr(0, index) : string;\n    var key;\n    var match;\n    var obj = splitType(type);\n    var params = {};\n    var value;\n    paramRegExp.lastIndex = index;\n    while(match = paramRegExp.exec(string)){\n        if (match.index !== index) {\n            throw new TypeError(\"invalid parameter format\");\n        }\n        index += match[0].length;\n        key = match[1].toLowerCase();\n        value = match[2];\n        if (value[0] === '\"') {\n            // remove quotes and escapes\n            value = value.substr(1, value.length - 2).replace(qescRegExp, \"$1\");\n        }\n        params[key] = value;\n    }\n    if (index !== -1 && index !== string.length) {\n        throw new TypeError(\"invalid parameter format\");\n    }\n    obj.parameters = params;\n    return obj;\n}\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @api private\n */ function getcontenttype(obj) {\n    if (typeof obj.getHeader === \"function\") {\n        // res-like\n        return obj.getHeader(\"content-type\");\n    }\n    if (typeof obj.headers === \"object\") {\n        // req-like\n        return obj.headers && obj.headers[\"content-type\"];\n    }\n}\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @api private\n */ function qstring(val) {\n    var str = String(val);\n    // no need to quote tokens\n    if (tokenRegExp.test(str)) {\n        return str;\n    }\n    if (str.length > 0 && !textRegExp.test(str)) {\n        throw new TypeError(\"invalid parameter value\");\n    }\n    return '\"' + str.replace(quoteRegExp, \"\\\\$1\") + '\"';\n}\n/**\n * Simply \"type/subtype+siffx\" into parts.\n *\n * @param {string} string\n * @return {Object}\n * @api private\n */ function splitType(string) {\n    var match = typeRegExp.exec(string.toLowerCase());\n    if (!match) {\n        throw new TypeError(\"invalid media type\");\n    }\n    var type = match[1];\n    var subtype = match[2];\n    var suffix;\n    // suffix after last +\n    var index = subtype.lastIndexOf(\"+\");\n    if (index !== -1) {\n        suffix = subtype.substr(index + 1);\n        subtype = subtype.substr(0, index);\n    }\n    var obj = {\n        type: type,\n        subtype: subtype,\n        suffix: suffix\n    };\n    return obj;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/media-typer/index.js\n");

/***/ })

};
;